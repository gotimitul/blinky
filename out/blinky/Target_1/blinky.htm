<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [C:\Users\gotim\Documents\MDK\blinky\out\blinky\Target_1\blinky.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image C:\Users\gotim\Documents\MDK\blinky\out\blinky\Target_1\blinky.axf</H1><HR>
<<<<<<< HEAD
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6240002: Last Updated: Sun Aug 24 10:58:16 2025
=======
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6240002: Last Updated: Sun Aug 24 09:39:27 2025
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><P>
<H3>Maximum Stack Usage =        512 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
ARM_GPIO_SignalEvent(unsigned int, unsigned int) &rArr; app_events_get() &rArr; osMessageQueueGet &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; EventRecord2
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[c5]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
<<<<<<< HEAD
 <LI><a href="#[4]">BusFault_Handler</a> from lto-llvm-ad6319.o(.text.BusFault_Handler) referenced from startup_stm32f407xx.o(RESET)
=======
 <LI><a href="#[4]">BusFault_Handler</a> from lto-llvm-13ef72.o(.text.BusFault_Handler) referenced from startup_stm32f407xx.o(RESET)
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
 <LI><a href="#[1e]">CAN1_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1d]">CAN1_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4a]">CAN2_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4b]">CAN2_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4c]">CAN2_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[49]">CAN2_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
<<<<<<< HEAD
 <LI><a href="#[7e]">CDC_Control_FS</a> from lto-llvm-ad6319.o(.text.CDC_Control_FS) referenced from lto-llvm-ad6319.o(.data.USBD_Interface_fops_FS)
 <LI><a href="#[7d]">CDC_DeInit_FS</a> from lto-llvm-ad6319.o(.text.CDC_DeInit_FS) referenced from lto-llvm-ad6319.o(.data.USBD_Interface_fops_FS)
 <LI><a href="#[7c]">CDC_Init_FS</a> from lto-llvm-ad6319.o(.text.CDC_Init_FS) referenced from lto-llvm-ad6319.o(.data.USBD_Interface_fops_FS)
 <LI><a href="#[7f]">CDC_Receive_FS</a> from lto-llvm-ad6319.o(.text.CDC_Receive_FS) referenced from lto-llvm-ad6319.o(.data.USBD_Interface_fops_FS)
 <LI><a href="#[80]">CDC_TransmitCplt_FS</a> from lto-llvm-ad6319.o(.text.CDC_TransmitCplt_FS) referenced from lto-llvm-ad6319.o(.data.USBD_Interface_fops_FS)
=======
 <LI><a href="#[7e]">CDC_Control_FS</a> from lto-llvm-13ef72.o(.text.CDC_Control_FS) referenced from lto-llvm-13ef72.o(.data.USBD_Interface_fops_FS)
 <LI><a href="#[7d]">CDC_DeInit_FS</a> from lto-llvm-13ef72.o(.text.CDC_DeInit_FS) referenced from lto-llvm-13ef72.o(.data.USBD_Interface_fops_FS)
 <LI><a href="#[7c]">CDC_Init_FS</a> from lto-llvm-13ef72.o(.text.CDC_Init_FS) referenced from lto-llvm-13ef72.o(.data.USBD_Interface_fops_FS)
 <LI><a href="#[7f]">CDC_Receive_FS</a> from lto-llvm-13ef72.o(.text.CDC_Receive_FS) referenced from lto-llvm-13ef72.o(.data.USBD_Interface_fops_FS)
 <LI><a href="#[80]">CDC_TransmitCplt_FS</a> from lto-llvm-13ef72.o(.text.CDC_TransmitCplt_FS) referenced from lto-llvm-13ef72.o(.data.USBD_Interface_fops_FS)
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
 <LI><a href="#[58]">DCMI_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[39]">DMA1_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[42]">DMA2_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
<<<<<<< HEAD
 <LI><a href="#[7]">DebugMon_Handler</a> from lto-llvm-ad6319.o(.text.DebugMon_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[47]">ETH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[48]">ETH_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from lto-llvm-ad6319.o(.text.EXTI0_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
=======
 <LI><a href="#[7]">DebugMon_Handler</a> from lto-llvm-13ef72.o(.text.DebugMon_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[47]">ETH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[48]">ETH_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from lto-llvm-13ef72.o(.text.EXTI0_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3a]">FMC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5a]">FPU_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[59]">HASH_RNG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
<<<<<<< HEAD
 <LI><a href="#[2]">HardFault_Handler</a> from lto-llvm-ad6319.o(.text.HardFault_Handler) referenced from startup_stm32f407xx.o(RESET)
=======
 <LI><a href="#[2]">HardFault_Handler</a> from lto-llvm-13ef72.o(.text.HardFault_Handler) referenced from startup_stm32f407xx.o(RESET)
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[53]">I2C3_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[52]">I2C3_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
<<<<<<< HEAD
 <LI><a href="#[3]">MemManage_Handler</a> from lto-llvm-ad6319.o(.text.MemManage_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from lto-llvm-ad6319.o(.text.NMI_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4d]">OTG_FS_IRQHandler</a> from lto-llvm-ad6319.o(.text.OTG_FS_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
=======
 <LI><a href="#[3]">MemManage_Handler</a> from lto-llvm-13ef72.o(.text.MemManage_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from lto-llvm-13ef72.o(.text.NMI_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4d]">OTG_FS_IRQHandler</a> from lto-llvm-13ef72.o(.text.OTG_FS_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
 <LI><a href="#[34]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[55]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[54]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[56]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
<<<<<<< HEAD
 <LI><a href="#[8]">PendSV_Handler</a> from lto-llvm-ad6319.o(.text.PendSV_Handler) referenced 2 times from lto-llvm-ad6319.o(.text.main)
 <LI><a href="#[8]">PendSV_Handler</a> from lto-llvm-ad6319.o(.text.PendSV_Handler) referenced from startup_stm32f407xx.o(RESET)
=======
 <LI><a href="#[8]">PendSV_Handler</a> from lto-llvm-13ef72.o(.text.PendSV_Handler) referenced 2 times from lto-llvm-13ef72.o(.text.main)
 <LI><a href="#[8]">PendSV_Handler</a> from lto-llvm-13ef72.o(.text.PendSV_Handler) referenced from startup_stm32f407xx.o(RESET)
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
<<<<<<< HEAD
 <LI><a href="#[6]">SVC_Handler</a> from lto-llvm-ad6319.o(.text.SVC_Handler) referenced 2 times from lto-llvm-ad6319.o(.text.main)
 <LI><a href="#[6]">SVC_Handler</a> from lto-llvm-ad6319.o(.text.SVC_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from lto-llvm-ad6319.o(.text.SysTick_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5b]">SystemInit</a> from lto-llvm-ad6319.o(.text.SystemInit) referenced from startup_stm32f407xx.o(.text)
=======
 <LI><a href="#[6]">SVC_Handler</a> from lto-llvm-13ef72.o(.text.SVC_Handler) referenced 2 times from lto-llvm-13ef72.o(.text.main)
 <LI><a href="#[6]">SVC_Handler</a> from lto-llvm-13ef72.o(.text.SVC_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from lto-llvm-13ef72.o(.text.SysTick_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5b]">SystemInit</a> from lto-llvm-13ef72.o(.text.SystemInit) referenced from startup_stm32f407xx.o(.text)
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
<<<<<<< HEAD
 <LI><a href="#[23]">TIM1_UP_TIM10_IRQHandler</a> from lto-llvm-ad6319.o(.text.TIM1_UP_TIM10_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
=======
 <LI><a href="#[23]">TIM1_UP_TIM10_IRQHandler</a> from lto-llvm-13ef72.o(.text.TIM1_UP_TIM10_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[40]">TIM6_DAC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[36]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[51]">USART6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
<<<<<<< HEAD
 <LI><a href="#[76]">USBD_CDC_DataIn</a> from lto-llvm-ad6319.o(.text.USBD_CDC_DataIn) referenced from lto-llvm-ad6319.o(.data.USBD_CDC)
 <LI><a href="#[77]">USBD_CDC_DataOut</a> from lto-llvm-ad6319.o(.text.USBD_CDC_DataOut) referenced from lto-llvm-ad6319.o(.data.USBD_CDC)
 <LI><a href="#[73]">USBD_CDC_DeInit</a> from lto-llvm-ad6319.o(.text.USBD_CDC_DeInit) referenced from lto-llvm-ad6319.o(.data.USBD_CDC)
 <LI><a href="#[75]">USBD_CDC_EP0_RxReady</a> from lto-llvm-ad6319.o(.text.USBD_CDC_EP0_RxReady) referenced from lto-llvm-ad6319.o(.data.USBD_CDC)
 <LI><a href="#[7b]">USBD_CDC_GetDeviceQualifierDescriptor</a> from lto-llvm-ad6319.o(.text.USBD_CDC_GetDeviceQualifierDescriptor) referenced from lto-llvm-ad6319.o(.data.USBD_CDC)
 <LI><a href="#[79]">USBD_CDC_GetFSCfgDesc</a> from lto-llvm-ad6319.o(.text.USBD_CDC_GetFSCfgDesc) referenced from lto-llvm-ad6319.o(.data.USBD_CDC)
 <LI><a href="#[78]">USBD_CDC_GetHSCfgDesc</a> from lto-llvm-ad6319.o(.text.USBD_CDC_GetHSCfgDesc) referenced from lto-llvm-ad6319.o(.data.USBD_CDC)
 <LI><a href="#[7a]">USBD_CDC_GetOtherSpeedCfgDesc</a> from lto-llvm-ad6319.o(.text.USBD_CDC_GetOtherSpeedCfgDesc) referenced from lto-llvm-ad6319.o(.data.USBD_CDC)
 <LI><a href="#[72]">USBD_CDC_Init</a> from lto-llvm-ad6319.o(.text.USBD_CDC_Init) referenced from lto-llvm-ad6319.o(.data.USBD_CDC)
 <LI><a href="#[74]">USBD_CDC_Setup</a> from lto-llvm-ad6319.o(.text.USBD_CDC_Setup) referenced from lto-llvm-ad6319.o(.data.USBD_CDC)
 <LI><a href="#[70]">USBD_FS_ConfigStrDescriptor</a> from lto-llvm-ad6319.o(.text.USBD_FS_ConfigStrDescriptor) referenced from lto-llvm-ad6319.o(.data.FS_Desc)
 <LI><a href="#[6b]">USBD_FS_DeviceDescriptor</a> from lto-llvm-ad6319.o(.text.USBD_FS_DeviceDescriptor) referenced from lto-llvm-ad6319.o(.data.FS_Desc)
 <LI><a href="#[71]">USBD_FS_InterfaceStrDescriptor</a> from lto-llvm-ad6319.o(.text.USBD_FS_InterfaceStrDescriptor) referenced from lto-llvm-ad6319.o(.data.FS_Desc)
 <LI><a href="#[6c]">USBD_FS_LangIDStrDescriptor</a> from lto-llvm-ad6319.o(.text.USBD_FS_LangIDStrDescriptor) referenced from lto-llvm-ad6319.o(.data.FS_Desc)
 <LI><a href="#[6d]">USBD_FS_ManufacturerStrDescriptor</a> from lto-llvm-ad6319.o(.text.USBD_FS_ManufacturerStrDescriptor) referenced from lto-llvm-ad6319.o(.data.FS_Desc)
 <LI><a href="#[6e]">USBD_FS_ProductStrDescriptor</a> from lto-llvm-ad6319.o(.text.USBD_FS_ProductStrDescriptor) referenced from lto-llvm-ad6319.o(.data.FS_Desc)
 <LI><a href="#[6f]">USBD_FS_SerialStrDescriptor</a> from lto-llvm-ad6319.o(.text.USBD_FS_SerialStrDescriptor) referenced from lto-llvm-ad6319.o(.data.FS_Desc)
 <LI><a href="#[5]">UsageFault_Handler</a> from lto-llvm-ad6319.o(.text.UsageFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[64]">ARM_GPIO_SignalEvent(unsigned int, unsigned int)</a> from lto-llvm-ad6319.o(.text._ZL20ARM_GPIO_SignalEventjj) referenced 2 times from lto-llvm-ad6319.o(.text.app_main)
 <LI><a href="#[63]">LedThread::thread_entry(void*)</a> from lto-llvm-ad6319.o(.text._ZN9LedThread12thread_entryEPv) referenced 2 times from lto-llvm-ad6319.o(.text._ZN9LedThreadC2EPKcj)
 <LI><a href="#[65]">UsbLogger::loggerThreadWrapper(void*)</a> from lto-llvm-ad6319.o(.text._ZN9UsbLogger19loggerThreadWrapperEPv) referenced 2 times from lto-llvm-ad6319.o(.text.app_main)
 <LI><a href="#[60]">void std::__2::__call_once_proxy[abi:nn200000]&lang;std::__2::tuple&lang;app_events_get()::$_0&&&rang;&rang;(void*)</a> from lto-llvm-ad6319.o(.text._ZNSt3__217__call_once_proxyB8nn200000INS_5tupleIJOZ14app_events_getvE3$_0EEEEEvPv) referenced 2 times from lto-llvm-ad6319.o(.text._Z14app_events_getv)
 <LI><a href="#[60]">void std::__2::__call_once_proxy[abi:nn200000]&lang;std::__2::tuple&lang;app_events_get()::$_0&&&rang;&rang;(void*)</a> from lto-llvm-ad6319.o(.text._ZNSt3__217__call_once_proxyB8nn200000INS_5tupleIJOZ14app_events_getvE3$_0EEEEEvPv) referenced 4 times from lto-llvm-ad6319.o(.text._ZN9LedThread3runEv)
 <LI><a href="#[62]">void std::__2::__call_once_proxy[abi:nn200000]&lang;std::__2::tuple&lang;(anonymous namespace)::shared_semaphore()::$_0&&&rang;&rang;(void*)</a> from lto-llvm-ad6319.o(.text._ZNSt3__217__call_once_proxyB8nn200000INS_5tupleIJOZN12_GLOBAL__N_116shared_semaphoreEvE3$_0EEEEEvPv) referenced 2 times from lto-llvm-ad6319.o(.text._ZN9LedThreadC2EPKcj)
=======
 <LI><a href="#[76]">USBD_CDC_DataIn</a> from lto-llvm-13ef72.o(.text.USBD_CDC_DataIn) referenced from lto-llvm-13ef72.o(.data.USBD_CDC)
 <LI><a href="#[77]">USBD_CDC_DataOut</a> from lto-llvm-13ef72.o(.text.USBD_CDC_DataOut) referenced from lto-llvm-13ef72.o(.data.USBD_CDC)
 <LI><a href="#[73]">USBD_CDC_DeInit</a> from lto-llvm-13ef72.o(.text.USBD_CDC_DeInit) referenced from lto-llvm-13ef72.o(.data.USBD_CDC)
 <LI><a href="#[75]">USBD_CDC_EP0_RxReady</a> from lto-llvm-13ef72.o(.text.USBD_CDC_EP0_RxReady) referenced from lto-llvm-13ef72.o(.data.USBD_CDC)
 <LI><a href="#[7b]">USBD_CDC_GetDeviceQualifierDescriptor</a> from lto-llvm-13ef72.o(.text.USBD_CDC_GetDeviceQualifierDescriptor) referenced from lto-llvm-13ef72.o(.data.USBD_CDC)
 <LI><a href="#[79]">USBD_CDC_GetFSCfgDesc</a> from lto-llvm-13ef72.o(.text.USBD_CDC_GetFSCfgDesc) referenced from lto-llvm-13ef72.o(.data.USBD_CDC)
 <LI><a href="#[78]">USBD_CDC_GetHSCfgDesc</a> from lto-llvm-13ef72.o(.text.USBD_CDC_GetHSCfgDesc) referenced from lto-llvm-13ef72.o(.data.USBD_CDC)
 <LI><a href="#[7a]">USBD_CDC_GetOtherSpeedCfgDesc</a> from lto-llvm-13ef72.o(.text.USBD_CDC_GetOtherSpeedCfgDesc) referenced from lto-llvm-13ef72.o(.data.USBD_CDC)
 <LI><a href="#[72]">USBD_CDC_Init</a> from lto-llvm-13ef72.o(.text.USBD_CDC_Init) referenced from lto-llvm-13ef72.o(.data.USBD_CDC)
 <LI><a href="#[74]">USBD_CDC_Setup</a> from lto-llvm-13ef72.o(.text.USBD_CDC_Setup) referenced from lto-llvm-13ef72.o(.data.USBD_CDC)
 <LI><a href="#[70]">USBD_FS_ConfigStrDescriptor</a> from lto-llvm-13ef72.o(.text.USBD_FS_ConfigStrDescriptor) referenced from lto-llvm-13ef72.o(.data.FS_Desc)
 <LI><a href="#[6b]">USBD_FS_DeviceDescriptor</a> from lto-llvm-13ef72.o(.text.USBD_FS_DeviceDescriptor) referenced from lto-llvm-13ef72.o(.data.FS_Desc)
 <LI><a href="#[71]">USBD_FS_InterfaceStrDescriptor</a> from lto-llvm-13ef72.o(.text.USBD_FS_InterfaceStrDescriptor) referenced from lto-llvm-13ef72.o(.data.FS_Desc)
 <LI><a href="#[6c]">USBD_FS_LangIDStrDescriptor</a> from lto-llvm-13ef72.o(.text.USBD_FS_LangIDStrDescriptor) referenced from lto-llvm-13ef72.o(.data.FS_Desc)
 <LI><a href="#[6d]">USBD_FS_ManufacturerStrDescriptor</a> from lto-llvm-13ef72.o(.text.USBD_FS_ManufacturerStrDescriptor) referenced from lto-llvm-13ef72.o(.data.FS_Desc)
 <LI><a href="#[6e]">USBD_FS_ProductStrDescriptor</a> from lto-llvm-13ef72.o(.text.USBD_FS_ProductStrDescriptor) referenced from lto-llvm-13ef72.o(.data.FS_Desc)
 <LI><a href="#[6f]">USBD_FS_SerialStrDescriptor</a> from lto-llvm-13ef72.o(.text.USBD_FS_SerialStrDescriptor) referenced from lto-llvm-13ef72.o(.data.FS_Desc)
 <LI><a href="#[5]">UsageFault_Handler</a> from lto-llvm-13ef72.o(.text.UsageFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[64]">ARM_GPIO_SignalEvent(unsigned int, unsigned int)</a> from lto-llvm-13ef72.o(.text._ZL20ARM_GPIO_SignalEventjj) referenced 2 times from lto-llvm-13ef72.o(.text.app_main)
 <LI><a href="#[63]">LedThread::thread_entry(void*)</a> from lto-llvm-13ef72.o(.text._ZN9LedThread12thread_entryEPv) referenced 2 times from lto-llvm-13ef72.o(.text._ZN9LedThreadC2EPKcj)
 <LI><a href="#[65]">UsbLogger::loggerThreadWrapper(void*)</a> from lto-llvm-13ef72.o(.text._ZN9UsbLogger19loggerThreadWrapperEPv) referenced 2 times from lto-llvm-13ef72.o(.text.app_main)
 <LI><a href="#[60]">void std::__2::__call_once_proxy[abi:nn200000]&lang;std::__2::tuple&lang;app_events_get()::$_0&&&rang;&rang;(void*)</a> from lto-llvm-13ef72.o(.text._ZNSt3__217__call_once_proxyB8nn200000INS_5tupleIJOZ14app_events_getvE3$_0EEEEEvPv) referenced 2 times from lto-llvm-13ef72.o(.text._Z14app_events_getv)
 <LI><a href="#[60]">void std::__2::__call_once_proxy[abi:nn200000]&lang;std::__2::tuple&lang;app_events_get()::$_0&&&rang;&rang;(void*)</a> from lto-llvm-13ef72.o(.text._ZNSt3__217__call_once_proxyB8nn200000INS_5tupleIJOZ14app_events_getvE3$_0EEEEEvPv) referenced 4 times from lto-llvm-13ef72.o(.text._ZN9LedThread3runEv)
 <LI><a href="#[62]">void std::__2::__call_once_proxy[abi:nn200000]&lang;std::__2::tuple&lang;(anonymous namespace)::shared_semaphore()::$_0&&&rang;&rang;(void*)</a> from lto-llvm-13ef72.o(.text._ZNSt3__217__call_once_proxyB8nn200000INS_5tupleIJOZN12_GLOBAL__N_116shared_semaphoreEvE3$_0EEEEEvPv) referenced 2 times from lto-llvm-13ef72.o(.text._ZN9LedThreadC2EPKcj)
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
 <LI><a href="#[5c]">__main</a> from __main.o(!!!main) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[5f]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[5e]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[5d]">_snputc</a> from _snputc.o(.text) referenced from noretval__2snprintf.o(.text)
<<<<<<< HEAD
 <LI><a href="#[66]">app_main</a> from lto-llvm-ad6319.o(.text.app_main) referenced 2 times from lto-llvm-ad6319.o(.text.main)
 <LI><a href="#[67]">prvIdleTask</a> from lto-llvm-ad6319.o(.text.prvIdleTask) referenced 2 times from lto-llvm-ad6319.o(.text.main)
 <LI><a href="#[6a]">prvTaskExitError</a> from lto-llvm-ad6319.o(.text.prvTaskExitError) referenced 2 times from lto-llvm-ad6319.o(.text.osThreadNew)
 <LI><a href="#[6a]">prvTaskExitError</a> from lto-llvm-ad6319.o(.text.prvTaskExitError) referenced 2 times from lto-llvm-ad6319.o(.text.xTaskCreateStatic)
 <LI><a href="#[68]">prvTimerTask</a> from lto-llvm-ad6319.o(.text.prvTimerTask) referenced 2 times from lto-llvm-ad6319.o(.text.main)
 <LI><a href="#[61]">vEventGroupClearBitsCallback</a> from lto-llvm-ad6319.o(.text.vEventGroupClearBitsCallback) referenced 2 times from lto-llvm-ad6319.o(.text._ZN9LedThread3runEv)
 <LI><a href="#[69]">vEventGroupSetBitsCallback</a> from lto-llvm-ad6319.o(.text.vEventGroupSetBitsCallback) referenced 2 times from lto-llvm-ad6319.o(.text.osEventFlagsSet)
=======
 <LI><a href="#[66]">app_main</a> from lto-llvm-13ef72.o(.text.app_main) referenced 2 times from lto-llvm-13ef72.o(.text.main)
 <LI><a href="#[67]">prvIdleTask</a> from lto-llvm-13ef72.o(.text.prvIdleTask) referenced 2 times from lto-llvm-13ef72.o(.text.main)
 <LI><a href="#[6a]">prvTaskExitError</a> from lto-llvm-13ef72.o(.text.prvTaskExitError) referenced 2 times from lto-llvm-13ef72.o(.text.osThreadNew)
 <LI><a href="#[6a]">prvTaskExitError</a> from lto-llvm-13ef72.o(.text.prvTaskExitError) referenced 2 times from lto-llvm-13ef72.o(.text.xTaskCreateStatic)
 <LI><a href="#[68]">prvTimerTask</a> from lto-llvm-13ef72.o(.text.prvTimerTask) referenced 2 times from lto-llvm-13ef72.o(.text.main)
 <LI><a href="#[61]">vEventGroupClearBitsCallback</a> from lto-llvm-13ef72.o(.text.vEventGroupClearBitsCallback) referenced 2 times from lto-llvm-13ef72.o(.text._ZN9LedThread3runEv)
 <LI><a href="#[69]">vEventGroupSetBitsCallback</a> from lto-llvm-13ef72.o(.text.vEventGroupSetBitsCallback) referenced 2 times from lto-llvm-13ef72.o(.text.osEventFlagsSet)
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5c]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[86]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[88]"></a>__scatterload_rt2</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[10f]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[110]"></a>__scatterload_loop</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[89]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[111]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, __scatter.o(!!handler_null), UNUSED)

<P><STRONG><a name="[112]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[8a]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[bd]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[8c]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[8e]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[90]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[91]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[92]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[94]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[113]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[96]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[98]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[9a]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[9c]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[114]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[a8]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[9e]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_fp_1 &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[115]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[a0]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_common &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[116]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[117]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[118]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[119]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[11a]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[a2]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[11b]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[11c]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[11d]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[11e]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[11f]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[120]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[121]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[122]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[123]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[124]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[125]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[126]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[127]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[128]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[129]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[ad]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[12a]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[12b]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[12c]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[12d]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[12e]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[12f]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[130]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[87]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[131]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[a3]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[a5]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = __rt_entry_postsh_1 &rArr; _platform_post_stackheap_init &rArr; EvrFreeRTOSSetup &rArr; EventRecorderInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[a7]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[a9]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; osThreadNew &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[132]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[c6]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[ac]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[133]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[ae]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[c5]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[b0]"></a>__2snprintf</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, noretval__2snprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedThread::run()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbLogger::log(char const*)
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__2::__call_once_proxy[abi:nn200000]&lang;std::__2::tuple&lang;(anonymous namespace)::shared_semaphore()::$_0&&&rang;&rang;(void*)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_events_get()
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedThread::LedThread__sub_object(char const*, unsigned int)
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_GPIO_SignalEvent(unsigned int, unsigned int)
</UL>

<P><STRONG><a name="[b3]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[b4]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[b5]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[b6]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[b2]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[8f]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[8b]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[b8]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[93]"></a>_printf_int_oct</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, _printf_oct_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[134]"></a>_printf_longlong_oct</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_oct_int.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>_printf_longlong_hex</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, _printf_hex_int_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[95]"></a>_printf_int_hex</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, _printf_hex_int_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[8d]"></a>_printf_hex_ptr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_hex_int_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[bb]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[f7]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbLogger::loggerThread()
</UL>

<P><STRONG><a name="[ef]"></a>strcmp</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, strcmpv7em.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedThread::run()
</UL>

<P><STRONG><a name="[135]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[136]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[137]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[b1]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>

<P><STRONG><a name="[5d]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> noretval__2snprintf.o(.text)
</UL>
<P><STRONG><a name="[be]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[97]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[99]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[bf]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[9b]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[9d]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[c0]"></a>_c16rtomb</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, _c16rtomb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[b9]"></a>_wcrtomb</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, _c16rtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[c1]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c16rtomb
</UL>

<P><STRONG><a name="[c2]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>

<P><STRONG><a name="[af]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[a4]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[a1]"></a>__rt_locale</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_locale_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[ab]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[c3]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[138]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[139]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[13a]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[13b]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[c7]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[c9]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[ca]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[102]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13c]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[107]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[cb]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[13d]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>__aeabi_memset4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memset4 &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>

<P><STRONG><a name="[13e]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_memset4.o(.text), UNUSED)

<P><STRONG><a name="[108]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>

<P><STRONG><a name="[13f]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>_memset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[d4]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[d5]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[140]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>

<P><STRONG><a name="[cc]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[141]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[142]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[143]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<<<<<<< HEAD
<P><STRONG><a name="[9f]"></a>_fp_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lto-llvm-ad6319.o(.text.$Sub$$_fp_init))
=======
<P><STRONG><a name="[9f]"></a>_fp_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lto-llvm-13ef72.o(.text.$Sub$$_fp_init))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$_fp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<<<<<<< HEAD
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-ad6319.o(.text.BusFault_Handler))
=======
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-13ef72.o(.text.BusFault_Handler))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<<<<<<< HEAD
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-ad6319.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, lto-llvm-ad6319.o(.text.EXTI0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-ad6319.o(.text.HardFault_Handler))
=======
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-13ef72.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, lto-llvm-13ef72.o(.text.EXTI0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-13ef72.o(.text.HardFault_Handler))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<<<<<<< HEAD
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-ad6319.o(.text.MemManage_Handler))
=======
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-13ef72.o(.text.MemManage_Handler))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<<<<<<< HEAD
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-ad6319.o(.text.NMI_Handler))
=======
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-13ef72.o(.text.NMI_Handler))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<<<<<<< HEAD
<P><STRONG><a name="[4d]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 5444 bytes, Stack size 80 bytes, lto-llvm-ad6319.o(.text.OTG_FS_IRQHandler))
=======
<P><STRONG><a name="[4d]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 5444 bytes, Stack size 80 bytes, lto-llvm-13ef72.o(.text.OTG_FS_IRQHandler))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = OTG_FS_IRQHandler &rArr; USBD_LL_PrepareReceive &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataOutStageCallback
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<<<<<<< HEAD
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, lto-llvm-ad6319.o(.text.PendSV_Handler))
=======
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, lto-llvm-13ef72.o(.text.PendSV_Handler))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 2]<UL><LI> startup_stm32f407xx.o(RESET)
<<<<<<< HEAD
<LI> lto-llvm-ad6319.o(.text.main)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lto-llvm-ad6319.o(.text.SVC_Handler))
<BR>[Address Reference Count : 2]<UL><LI> startup_stm32f407xx.o(RESET)
<LI> lto-llvm-ad6319.o(.text.main)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, lto-llvm-ad6319.o(.text.SysTick_Handler))
=======
<LI> lto-llvm-13ef72.o(.text.main)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lto-llvm-13ef72.o(.text.SVC_Handler))
<BR>[Address Reference Count : 2]<UL><LI> startup_stm32f407xx.o(RESET)
<LI> lto-llvm-13ef72.o(.text.main)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, lto-llvm-13ef72.o(.text.SysTick_Handler))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<<<<<<< HEAD
<P><STRONG><a name="[5b]"></a>SystemInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lto-llvm-ad6319.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 212 bytes, Stack size 0 bytes, lto-llvm-ad6319.o(.text.TIM1_UP_TIM10_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-ad6319.o(.text.UsageFault_Handler))
=======
<P><STRONG><a name="[5b]"></a>SystemInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lto-llvm-13ef72.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 212 bytes, Stack size 0 bytes, lto-llvm-13ef72.o(.text.TIM1_UP_TIM10_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-13ef72.o(.text.UsageFault_Handler))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[e4]"></a>std::__2::__call_once(unsigned long volatile&, void*, void (*)(void*))</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, call_once.cpp.o(.text._ZNSt3__211__call_onceERVmPvPFvS2_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::__2::__call_once(unsigned long volatile&, void*, void (*)(void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedThread::run()
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_events_get()
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedThread::LedThread__sub_object(char const*, unsigned int)
</UL>

<<<<<<< HEAD
<P><STRONG><a name="[81]"></a>_mutex_acquire</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, lto-llvm-ad6319.o(.text._mutex_acquire), UNUSED, KEPT)
=======
<P><STRONG><a name="[81]"></a>_mutex_acquire</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, lto-llvm-13ef72.o(.text._mutex_acquire), UNUSED, KEPT)
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _mutex_acquire &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>

<<<<<<< HEAD
<P><STRONG><a name="[82]"></a>_mutex_free</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lto-llvm-ad6319.o(.text._mutex_free), UNUSED, KEPT)
=======
<P><STRONG><a name="[82]"></a>_mutex_free</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lto-llvm-13ef72.o(.text._mutex_free), UNUSED, KEPT)
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _mutex_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>

<<<<<<< HEAD
<P><STRONG><a name="[83]"></a>_mutex_initialize</STRONG> (Thumb, 638 bytes, Stack size 32 bytes, lto-llvm-ad6319.o(.text._mutex_initialize), UNUSED, KEPT)
=======
<P><STRONG><a name="[83]"></a>_mutex_initialize</STRONG> (Thumb, 638 bytes, Stack size 32 bytes, lto-llvm-13ef72.o(.text._mutex_initialize), UNUSED, KEPT)
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _mutex_initialize &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>

<<<<<<< HEAD
<P><STRONG><a name="[84]"></a>_mutex_release</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lto-llvm-ad6319.o(.text._mutex_release), UNUSED, KEPT)
=======
<P><STRONG><a name="[84]"></a>_mutex_release</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lto-llvm-13ef72.o(.text._mutex_release), UNUSED, KEPT)
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _mutex_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>

<<<<<<< HEAD
<P><STRONG><a name="[a6]"></a>_platform_post_stackheap_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lto-llvm-ad6319.o(.text._platform_post_stackheap_init))
=======
<P><STRONG><a name="[a6]"></a>_platform_post_stackheap_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lto-llvm-13ef72.o(.text._platform_post_stackheap_init))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _platform_post_stackheap_init &rArr; EvrFreeRTOSSetup &rArr; EventRecorderInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFreeRTOSSetup
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_postsh_1
</UL>

<<<<<<< HEAD
<P><STRONG><a name="[aa]"></a>main</STRONG> (Thumb, 3704 bytes, Stack size 72 bytes, lto-llvm-ad6319.o(.text.main))
=======
<P><STRONG><a name="[aa]"></a>main</STRONG> (Thumb, 3704 bytes, Stack size 72 bytes, lto-llvm-13ef72.o(.text.main))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = main &rArr; osThreadNew &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvPortStartFirstTask
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnableVFP
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFreeRTOSSetup
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[e7]"></a>__cxa_guard_acquire</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, cxa_guard.cpp.o(.text.unlikely.__cxa_guard_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = __cxa_guard_acquire &rArr; abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedThread::run()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbLogger::getInstance()
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__2::__call_once_proxy[abi:nn200000]&lang;std::__2::tuple&lang;(anonymous namespace)::shared_semaphore()::$_0&&&rang;&rang;(void*)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_events_get()
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedThread::LedThread__sub_object(char const*, unsigned int)
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_GPIO_SignalEvent(unsigned int, unsigned int)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[e8]"></a>__cxa_guard_release</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cxa_guard.cpp.o(.text.unlikely.__cxa_guard_release))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedThread::run()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbLogger::getInstance()
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__2::__call_once_proxy[abi:nn200000]&lang;std::__2::tuple&lang;(anonymous namespace)::shared_semaphore()::$_0&&&rang;&rang;(void*)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_events_get()
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedThread::LedThread__sub_object(char const*, unsigned int)
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_GPIO_SignalEvent(unsigned int, unsigned int)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[10c]"></a>abort_message</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, abort_message.cpp.o(.text.unlikely.abort_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>

<<<<<<< HEAD
<P><STRONG><a name="[85]"></a>vTaskSwitchContext</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, lto-llvm-ad6319.o(.text.vTaskSwitchContext))
=======
<P><STRONG><a name="[85]"></a>vTaskSwitchContext</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, lto-llvm-13ef72.o(.text.vTaskSwitchContext))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskSwitchContext &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bc]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[5f]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[d0]"></a>$Super$$_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[144]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[145]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[5e]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<<<<<<< HEAD
<P><STRONG><a name="[66]"></a>app_main</STRONG> (Thumb, 704 bytes, Stack size 24 bytes, lto-llvm-ad6319.o(.text.app_main))
=======
<P><STRONG><a name="[66]"></a>app_main</STRONG> (Thumb, 704 bytes, Stack size 24 bytes, lto-llvm-13ef72.o(.text.app_main))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = app_main &rArr; LedThread::LedThread__sub_object(char const*, unsigned int) &rArr; osMessageQueueGet &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedThread::LedThread__sub_object(char const*, unsigned int)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<<<<<<< HEAD
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ad6319.o(.text.main)
</UL>
<P><STRONG><a name="[ff]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 260 bytes, Stack size 44 bytes, lto-llvm-ad6319.o(.text.HAL_GPIO_DeInit))
=======
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-13ef72.o(.text.main)
</UL>
<P><STRONG><a name="[ff]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 260 bytes, Stack size 44 bytes, lto-llvm-13ef72.o(.text.HAL_GPIO_DeInit))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<<<<<<< HEAD
<P><STRONG><a name="[100]"></a>HAL_GPIO_Init</STRONG> (Thumb, 404 bytes, Stack size 48 bytes, lto-llvm-ad6319.o(.text.HAL_GPIO_Init))
=======
<P><STRONG><a name="[100]"></a>HAL_GPIO_Init</STRONG> (Thumb, 404 bytes, Stack size 48 bytes, lto-llvm-13ef72.o(.text.HAL_GPIO_Init))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<<<<<<< HEAD
<P><STRONG><a name="[64]"></a>ARM_GPIO_SignalEvent(unsigned int, unsigned int)</STRONG> (Thumb, 156 bytes, Stack size 144 bytes, lto-llvm-ad6319.o(.text._ZL20ARM_GPIO_SignalEventjj))
=======
<P><STRONG><a name="[64]"></a>ARM_GPIO_SignalEvent(unsigned int, unsigned int)</STRONG> (Thumb, 156 bytes, Stack size 144 bytes, lto-llvm-13ef72.o(.text._ZL20ARM_GPIO_SignalEventjj))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = ARM_GPIO_SignalEvent(unsigned int, unsigned int) &rArr; app_events_get() &rArr; osMessageQueueGet &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_events_get()
</UL>
<<<<<<< HEAD
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ad6319.o(.text.app_main)
</UL>
<P><STRONG><a name="[d7]"></a>EventRecord2</STRONG> (Thumb, 390 bytes, Stack size 32 bytes, lto-llvm-ad6319.o(.text.EventRecord2))
=======
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-13ef72.o(.text.app_main)
</UL>
<P><STRONG><a name="[d7]"></a>EventRecord2</STRONG> (Thumb, 390 bytes, Stack size 32 bytes, lto-llvm-13ef72.o(.text.EventRecord2))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupSetBitsCallback
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFreeRTOSSetup
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbLogger::loggerThread()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupClearBitsCallback
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedThread::run()
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__2::__call_once_proxy[abi:nn200000]&lang;std::__2::tuple&lang;(anonymous namespace)::shared_semaphore()::$_0&&&rang;&rang;(void*)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<<<<<<< HEAD
<P><STRONG><a name="[fd]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 196 bytes, Stack size 20 bytes, lto-llvm-ad6319.o(.text.prvInitialiseNewQueue))
=======
<P><STRONG><a name="[fd]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 196 bytes, Stack size 20 bytes, lto-llvm-13ef72.o(.text.prvInitialiseNewQueue))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = prvInitialiseNewQueue &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__2::__call_once_proxy[abi:nn200000]&lang;std::__2::tuple&lang;(anonymous namespace)::shared_semaphore()::$_0&&&rang;&rang;(void*)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<<<<<<< HEAD
<P><STRONG><a name="[65]"></a>UsbLogger::loggerThreadWrapper(void*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lto-llvm-ad6319.o(.text._ZN9UsbLogger19loggerThreadWrapperEPv))
=======
<P><STRONG><a name="[65]"></a>UsbLogger::loggerThreadWrapper(void*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lto-llvm-13ef72.o(.text._ZN9UsbLogger19loggerThreadWrapperEPv))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = UsbLogger::loggerThreadWrapper(void*) &rArr; UsbLogger::loggerThread() &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbLogger::loggerThread()
</UL>
<<<<<<< HEAD
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ad6319.o(.text.app_main)
</UL>
<P><STRONG><a name="[f5]"></a>osThreadNew</STRONG> (Thumb, 508 bytes, Stack size 56 bytes, lto-llvm-ad6319.o(.text.osThreadNew))
=======
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-13ef72.o(.text.app_main)
</UL>
<P><STRONG><a name="[f5]"></a>osThreadNew</STRONG> (Thumb, 508 bytes, Stack size 56 bytes, lto-llvm-13ef72.o(.text.osThreadNew))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = osThreadNew &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedThread::LedThread__sub_object(char const*, unsigned int)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<<<<<<< HEAD
<P><STRONG><a name="[fb]"></a>osEventFlagsNew</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, lto-llvm-ad6319.o(.text.osEventFlagsNew))
=======
<P><STRONG><a name="[fb]"></a>osEventFlagsNew</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, lto-llvm-13ef72.o(.text.osEventFlagsNew))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osEventFlagsNew &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__2::__call_once_proxy[abi:nn200000]&lang;std::__2::tuple&lang;app_events_get()::$_0&&&rang;&rang;(void*)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<<<<<<< HEAD
<P><STRONG><a name="[eb]"></a>osThreadExit</STRONG> (Thumb, 450 bytes, Stack size 0 bytes, lto-llvm-ad6319.o(.text.osThreadExit))
=======
<P><STRONG><a name="[eb]"></a>osThreadExit</STRONG> (Thumb, 450 bytes, Stack size 0 bytes, lto-llvm-13ef72.o(.text.osThreadExit))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osThreadExit &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedThread::thread_entry(void*)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<<<<<<< HEAD
<P><STRONG><a name="[f4]"></a>LedThread::LedThread__sub_object(char const*, unsigned int)</STRONG> (Thumb, 252 bytes, Stack size 152 bytes, lto-llvm-ad6319.o(.text._ZN9LedThreadC2EPKcj))
=======
<P><STRONG><a name="[f4]"></a>LedThread::LedThread__sub_object(char const*, unsigned int)</STRONG> (Thumb, 252 bytes, Stack size 152 bytes, lto-llvm-13ef72.o(.text._ZN9LedThreadC2EPKcj))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = LedThread::LedThread__sub_object(char const*, unsigned int) &rArr; osMessageQueueGet &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__call_once(unsigned long volatile&, void*, void (*)(void*))
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<<<<<<< HEAD
=======
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<<<<<<< HEAD
<P><STRONG><a name="[e3]"></a>app_events_get()</STRONG> (Thumb, 184 bytes, Stack size 152 bytes, lto-llvm-ad6319.o(.text._Z14app_events_getv))
=======
<P><STRONG><a name="[e3]"></a>app_events_get()</STRONG> (Thumb, 184 bytes, Stack size 152 bytes, lto-llvm-13ef72.o(.text._Z14app_events_getv))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = app_events_get() &rArr; osMessageQueueGet &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__call_once(unsigned long volatile&, void*, void (*)(void*))
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_GPIO_SignalEvent(unsigned int, unsigned int)
</UL>

<<<<<<< HEAD
<P><STRONG><a name="[d2]"></a>osEventFlagsSet</STRONG> (Thumb, 396 bytes, Stack size 56 bytes, lto-llvm-ad6319.o(.text.osEventFlagsSet))
=======
<P><STRONG><a name="[d2]"></a>osEventFlagsSet</STRONG> (Thumb, 396 bytes, Stack size 56 bytes, lto-llvm-13ef72.o(.text.osEventFlagsSet))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = osEventFlagsSet &rArr; xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_TransmitCplt_FS
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_GPIO_SignalEvent(unsigned int, unsigned int)
</UL>

<<<<<<< HEAD
<P><STRONG><a name="[e5]"></a>osMessageQueuePut</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, lto-llvm-ad6319.o(.text.osMessageQueuePut))
=======
<P><STRONG><a name="[e5]"></a>osMessageQueuePut</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, lto-llvm-13ef72.o(.text.osMessageQueuePut))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = osMessageQueuePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedThread::run()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbLogger::log(char const*)
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__2::__call_once_proxy[abi:nn200000]&lang;std::__2::tuple&lang;(anonymous namespace)::shared_semaphore()::$_0&&&rang;&rang;(void*)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_events_get()
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedThread::LedThread__sub_object(char const*, unsigned int)
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_GPIO_SignalEvent(unsigned int, unsigned int)
</UL>

<<<<<<< HEAD
<P><STRONG><a name="[e6]"></a>osMessageQueueGet</STRONG> (Thumb, 444 bytes, Stack size 32 bytes, lto-llvm-ad6319.o(.text.osMessageQueueGet))
=======
<P><STRONG><a name="[e6]"></a>osMessageQueueGet</STRONG> (Thumb, 444 bytes, Stack size 32 bytes, lto-llvm-13ef72.o(.text.osMessageQueueGet))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = osMessageQueueGet &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedThread::run()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbLogger::log(char const*)
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__2::__call_once_proxy[abi:nn200000]&lang;std::__2::tuple&lang;(anonymous namespace)::shared_semaphore()::$_0&&&rang;&rang;(void*)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_events_get()
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedThread::LedThread__sub_object(char const*, unsigned int)
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_GPIO_SignalEvent(unsigned int, unsigned int)
</UL>

<<<<<<< HEAD
<P><STRONG><a name="[60]"></a>void std::__2::__call_once_proxy[abi:nn200000]&lang;std::__2::tuple&lang;app_events_get()::$_0&&&rang;&rang;(void*)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lto-llvm-ad6319.o(.text._ZNSt3__217__call_once_proxyB8nn200000INS_5tupleIJOZ14app_events_getvE3$_0EEEEEvPv))
=======
<P><STRONG><a name="[60]"></a>void std::__2::__call_once_proxy[abi:nn200000]&lang;std::__2::tuple&lang;app_events_get()::$_0&&&rang;&rang;(void*)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lto-llvm-13ef72.o(.text._ZNSt3__217__call_once_proxyB8nn200000INS_5tupleIJOZ14app_events_getvE3$_0EEEEEvPv))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = void std::__2::__call_once_proxy[abi:nn200000]&lang;std::__2::tuple&lang;app_events_get()::$_0&&&rang;&rang;(void*) &rArr; osEventFlagsNew &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
</UL>
<<<<<<< HEAD
<BR>[Address Reference Count : 2]<UL><LI> lto-llvm-ad6319.o(.text._Z14app_events_getv)
<LI> lto-llvm-ad6319.o(.text._ZN9LedThread3runEv)
</UL>
<P><STRONG><a name="[62]"></a>void std::__2::__call_once_proxy[abi:nn200000]&lang;std::__2::tuple&lang;(anonymous namespace)::shared_semaphore()::$_0&&&rang;&rang;(void*)</STRONG> (Thumb, 328 bytes, Stack size 152 bytes, lto-llvm-ad6319.o(.text._ZNSt3__217__call_once_proxyB8nn200000INS_5tupleIJOZN12_GLOBAL__N_116shared_semaphoreEvE3$_0EEEEEvPv))
=======
<BR>[Address Reference Count : 2]<UL><LI> lto-llvm-13ef72.o(.text._Z14app_events_getv)
<LI> lto-llvm-13ef72.o(.text._ZN9LedThread3runEv)
</UL>
<P><STRONG><a name="[62]"></a>void std::__2::__call_once_proxy[abi:nn200000]&lang;std::__2::tuple&lang;(anonymous namespace)::shared_semaphore()::$_0&&&rang;&rang;(void*)</STRONG> (Thumb, 328 bytes, Stack size 152 bytes, lto-llvm-13ef72.o(.text._ZNSt3__217__call_once_proxyB8nn200000INS_5tupleIJOZN12_GLOBAL__N_116shared_semaphoreEvE3$_0EEEEEvPv))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = void std::__2::__call_once_proxy[abi:nn200000]&lang;std::__2::tuple&lang;(anonymous namespace)::shared_semaphore()::$_0&&&rang;&rang;(void*) &rArr; osMessageQueueGet &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<<<<<<< HEAD
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
=======
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<<<<<<< HEAD
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ad6319.o(.text._ZN9LedThreadC2EPKcj)
</UL>
<P><STRONG><a name="[63]"></a>LedThread::thread_entry(void*)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lto-llvm-ad6319.o(.text._ZN9LedThread12thread_entryEPv))
=======
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-13ef72.o(.text._ZN9LedThreadC2EPKcj)
</UL>
<P><STRONG><a name="[63]"></a>LedThread::thread_entry(void*)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lto-llvm-13ef72.o(.text._ZN9LedThread12thread_entryEPv))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = LedThread::thread_entry(void*) &rArr; LedThread::run() &rArr; osMessageQueueGet &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedThread::run()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbLogger::log(char const*)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbLogger::getInstance()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
</UL>
<<<<<<< HEAD
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ad6319.o(.text._ZN9LedThreadC2EPKcj)
</UL>
<P><STRONG><a name="[fc]"></a>pvPortMalloc</STRONG> (Thumb, 448 bytes, Stack size 16 bytes, lto-llvm-ad6319.o(.text.pvPortMalloc))
=======
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-13ef72.o(.text._ZN9LedThreadC2EPKcj)
</UL>
<P><STRONG><a name="[fc]"></a>pvPortMalloc</STRONG> (Thumb, 448 bytes, Stack size 16 bytes, lto-llvm-13ef72.o(.text.pvPortMalloc))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__2::__call_once_proxy[abi:nn200000]&lang;std::__2::tuple&lang;(anonymous namespace)::shared_semaphore()::$_0&&&rang;&rang;(void*)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>

<<<<<<< HEAD
<P><STRONG><a name="[f3]"></a>xQueueGenericSend</STRONG> (Thumb, 922 bytes, Stack size 72 bytes, lto-llvm-ad6319.o(.text.xQueueGenericSend))
=======
<P><STRONG><a name="[f3]"></a>xQueueGenericSend</STRONG> (Thumb, 922 bytes, Stack size 72 bytes, lto-llvm-13ef72.o(.text.xQueueGenericSend))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedThread::run()
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__2::__call_once_proxy[abi:nn200000]&lang;std::__2::tuple&lang;(anonymous namespace)::shared_semaphore()::$_0&&&rang;&rang;(void*)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>

<<<<<<< HEAD
<P><STRONG><a name="[fe]"></a>vPortFree</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, lto-llvm-ad6319.o(.text.vPortFree))
=======
<P><STRONG><a name="[fe]"></a>vPortFree</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, lto-llvm-13ef72.o(.text.vPortFree))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__2::__call_once_proxy[abi:nn200000]&lang;std::__2::tuple&lang;(anonymous namespace)::shared_semaphore()::$_0&&&rang;&rang;(void*)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>

<<<<<<< HEAD
<P><STRONG><a name="[e9]"></a>UsbLogger::getInstance()</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lto-llvm-ad6319.o(.text._ZN9UsbLogger11getInstanceEv))
=======
<P><STRONG><a name="[e9]"></a>UsbLogger::getInstance()</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lto-llvm-13ef72.o(.text._ZN9UsbLogger11getInstanceEv))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = UsbLogger::getInstance() &rArr; __cxa_guard_acquire &rArr; abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedThread::thread_entry(void*)
</UL>

<<<<<<< HEAD
<P><STRONG><a name="[ea]"></a>UsbLogger::log(char const*)</STRONG> (Thumb, 76 bytes, Stack size 144 bytes, lto-llvm-ad6319.o(.text._ZN9UsbLogger3logEPKc))
=======
<P><STRONG><a name="[ea]"></a>UsbLogger::log(char const*)</STRONG> (Thumb, 76 bytes, Stack size 144 bytes, lto-llvm-13ef72.o(.text._ZN9UsbLogger3logEPKc))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = UsbLogger::log(char const*) &rArr; osMessageQueueGet &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedThread::thread_entry(void*)
</UL>

<<<<<<< HEAD
<P><STRONG><a name="[ec]"></a>LedThread::run()</STRONG> (Thumb, 2136 bytes, Stack size 144 bytes, lto-llvm-ad6319.o(.text._ZN9LedThread3runEv))
=======
<P><STRONG><a name="[ec]"></a>LedThread::run()</STRONG> (Thumb, 2136 bytes, Stack size 144 bytes, lto-llvm-13ef72.o(.text._ZN9LedThread3runEv))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = LedThread::run() &rArr; osMessageQueueGet &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__call_once(unsigned long volatile&, void*, void (*)(void*))
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<<<<<<< HEAD
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
=======
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<<<<<<< HEAD
=======
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedThread::thread_entry(void*)
</UL>

<<<<<<< HEAD
<P><STRONG><a name="[ed]"></a>osDelay</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, lto-llvm-ad6319.o(.text.osDelay))
=======
<P><STRONG><a name="[ed]"></a>osDelay</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, lto-llvm-13ef72.o(.text.osDelay))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbLogger::loggerThread()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedThread::run()
</UL>

<<<<<<< HEAD
<P><STRONG><a name="[ee]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 1714 bytes, Stack size 72 bytes, lto-llvm-ad6319.o(.text.xQueueSemaphoreTake))
=======
<P><STRONG><a name="[ee]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 1714 bytes, Stack size 72 bytes, lto-llvm-13ef72.o(.text.xQueueSemaphoreTake))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedThread::run()
</UL>

<<<<<<< HEAD
<P><STRONG><a name="[61]"></a>vEventGroupClearBitsCallback</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, lto-llvm-ad6319.o(.text.vEventGroupClearBitsCallback))
=======
<P><STRONG><a name="[61]"></a>vEventGroupClearBitsCallback</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, lto-llvm-13ef72.o(.text.vEventGroupClearBitsCallback))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vEventGroupClearBitsCallback &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<<<<<<< HEAD
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ad6319.o(.text._ZN9LedThread3runEv)
</UL>
<P><STRONG><a name="[f0]"></a>EventRecord4</STRONG> (Thumb, 672 bytes, Stack size 44 bytes, lto-llvm-ad6319.o(.text.EventRecord4))
=======
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-13ef72.o(.text._ZN9LedThread3runEv)
</UL>
<P><STRONG><a name="[f0]"></a>EventRecord4</STRONG> (Thumb, 672 bytes, Stack size 44 bytes, lto-llvm-13ef72.o(.text.EventRecord4))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbLogger::loggerThread()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedThread::run()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>

<<<<<<< HEAD
<P><STRONG><a name="[f1]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 324 bytes, Stack size 32 bytes, lto-llvm-ad6319.o(.text.xQueueGenericSendFromISR))
=======
<P><STRONG><a name="[f1]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 324 bytes, Stack size 32 bytes, lto-llvm-13ef72.o(.text.xQueueGenericSendFromISR))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xQueueGenericSendFromISR &rArr; xTaskPriorityDisinherit &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedThread::run()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
</UL>

<<<<<<< HEAD
<P><STRONG><a name="[f2]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, lto-llvm-ad6319.o(.text.xTaskRemoveFromEventList))
=======
<P><STRONG><a name="[f2]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, lto-llvm-13ef72.o(.text.xTaskRemoveFromEventList))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xTaskRemoveFromEventList &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedThread::run()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<<<<<<< HEAD
<P><STRONG><a name="[f6]"></a>UsbLogger::loggerThread()</STRONG> (Thumb, 1008 bytes, Stack size 72 bytes, lto-llvm-ad6319.o(.text._ZN9UsbLogger12loggerThreadEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = UsbLogger::loggerThread() &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
=======
<P><STRONG><a name="[f6]"></a>UsbLogger::loggerThread()</STRONG> (Thumb, 1008 bytes, Stack size 72 bytes, lto-llvm-13ef72.o(.text._ZN9UsbLogger12loggerThreadEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = UsbLogger::loggerThread() &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<<<<<<< HEAD
=======
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbLogger::loggerThreadWrapper(void*)
</UL>

<<<<<<< HEAD
<P><STRONG><a name="[d1]"></a>USB_EPStartXfer</STRONG> (Thumb, 458 bytes, Stack size 16 bytes, lto-llvm-ad6319.o(.text.USB_EPStartXfer))
=======
<P><STRONG><a name="[d1]"></a>USB_EPStartXfer</STRONG> (Thumb, 458 bytes, Stack size 16 bytes, lto-llvm-13ef72.o(.text.USB_EPStartXfer))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_EPStartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_DataIn
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Setup
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Receive_FS
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataOutStageCallback
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbLogger::loggerThread()
</UL>

<<<<<<< HEAD
<P><STRONG><a name="[f8]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 336 bytes, Stack size 32 bytes, lto-llvm-ad6319.o(.text.prvAddCurrentTaskToDelayedList))
=======
<P><STRONG><a name="[f8]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 336 bytes, Stack size 32 bytes, lto-llvm-13ef72.o(.text.prvAddCurrentTaskToDelayedList))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbLogger::loggerThread()
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<<<<<<< HEAD
<P><STRONG><a name="[f9]"></a>xTaskResumeAll</STRONG> (Thumb, 528 bytes, Stack size 40 bytes, lto-llvm-ad6319.o(.text.xTaskResumeAll))
=======
<P><STRONG><a name="[f9]"></a>xTaskResumeAll</STRONG> (Thumb, 528 bytes, Stack size 40 bytes, lto-llvm-13ef72.o(.text.xTaskResumeAll))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbLogger::loggerThread()
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<<<<<<< HEAD
<P><STRONG><a name="[fa]"></a>xQueueReceive</STRONG> (Thumb, 934 bytes, Stack size 72 bytes, lto-llvm-ad6319.o(.text.xQueueReceive))
=======
<P><STRONG><a name="[fa]"></a>xQueueReceive</STRONG> (Thumb, 934 bytes, Stack size 72 bytes, lto-llvm-13ef72.o(.text.xQueueReceive))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbLogger::loggerThread()
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<<<<<<< HEAD
<P><STRONG><a name="[d3]"></a>EventRecorderInitialize</STRONG> (Thumb, 1036 bytes, Stack size 40 bytes, lto-llvm-ad6319.o(.text.EventRecorderInitialize))
=======
<P><STRONG><a name="[d3]"></a>EventRecorderInitialize</STRONG> (Thumb, 1036 bytes, Stack size 40 bytes, lto-llvm-13ef72.o(.text.EventRecorderInitialize))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = EventRecorderInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFreeRTOSSetup
</UL>

<<<<<<< HEAD
<P><STRONG><a name="[101]"></a>HAL_InitTick</STRONG> (Thumb, 344 bytes, Stack size 12 bytes, lto-llvm-ad6319.o(.text.HAL_InitTick))
=======
<P><STRONG><a name="[101]"></a>HAL_InitTick</STRONG> (Thumb, 344 bytes, Stack size 12 bytes, lto-llvm-13ef72.o(.text.HAL_InitTick))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<<<<<<< HEAD
<P><STRONG><a name="[d6]"></a>EvrFreeRTOSSetup</STRONG> (Thumb, 290 bytes, Stack size 8 bytes, lto-llvm-ad6319.o(.text.EvrFreeRTOSSetup))
=======
<P><STRONG><a name="[d6]"></a>EvrFreeRTOSSetup</STRONG> (Thumb, 290 bytes, Stack size 8 bytes, lto-llvm-13ef72.o(.text.EvrFreeRTOSSetup))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = EvrFreeRTOSSetup &rArr; EventRecorderInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<<<<<<< HEAD
<P><STRONG><a name="[67]"></a>prvIdleTask</STRONG> (Thumb, 226 bytes, Stack size 0 bytes, lto-llvm-ad6319.o(.text.prvIdleTask))
=======
<P><STRONG><a name="[67]"></a>prvIdleTask</STRONG> (Thumb, 226 bytes, Stack size 0 bytes, lto-llvm-13ef72.o(.text.prvIdleTask))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = prvIdleTask &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<<<<<<< HEAD
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ad6319.o(.text.main)
</UL>
<P><STRONG><a name="[103]"></a>xTaskCreateStatic</STRONG> (Thumb, 290 bytes, Stack size 48 bytes, lto-llvm-ad6319.o(.text.xTaskCreateStatic))
=======
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-13ef72.o(.text.main)
</UL>
<P><STRONG><a name="[103]"></a>xTaskCreateStatic</STRONG> (Thumb, 290 bytes, Stack size 48 bytes, lto-llvm-13ef72.o(.text.xTaskCreateStatic))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = xTaskCreateStatic &rArr; prvAddNewTaskToReadyList &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>

<<<<<<< HEAD
<P><STRONG><a name="[68]"></a>prvTimerTask</STRONG> (Thumb, 1288 bytes, Stack size 32 bytes, lto-llvm-ad6319.o(.text.prvTimerTask))
=======
<P><STRONG><a name="[68]"></a>prvTimerTask</STRONG> (Thumb, 1288 bytes, Stack size 32 bytes, lto-llvm-13ef72.o(.text.prvTimerTask))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = prvTimerTask &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<<<<<<< HEAD
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ad6319.o(.text.main)
</UL>
<P><STRONG><a name="[104]"></a>vPortEnableVFP</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lto-llvm-ad6319.o(.text.vPortEnableVFP))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[105]"></a>prvPortStartFirstTask</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lto-llvm-ad6319.o(.text.prvPortStartFirstTask))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d8]"></a>HAL_PCD_DataOutStageCallback</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, lto-llvm-ad6319.o(.text.HAL_PCD_DataOutStageCallback))
=======
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-13ef72.o(.text.main)
</UL>
<P><STRONG><a name="[104]"></a>vPortEnableVFP</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lto-llvm-13ef72.o(.text.vPortEnableVFP))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[105]"></a>prvPortStartFirstTask</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lto-llvm-13ef72.o(.text.prvPortStartFirstTask))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d8]"></a>HAL_PCD_DataOutStageCallback</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, lto-llvm-13ef72.o(.text.HAL_PCD_DataOutStageCallback))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PCD_DataOutStageCallback &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<<<<<<< HEAD
<P><STRONG><a name="[e1]"></a>USBD_LL_OpenEP</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, lto-llvm-ad6319.o(.text.USBD_LL_OpenEP))
=======
<P><STRONG><a name="[e1]"></a>USBD_LL_OpenEP</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, lto-llvm-13ef72.o(.text.USBD_LL_OpenEP))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_LL_OpenEP
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Init
</UL>

<<<<<<< HEAD
<P><STRONG><a name="[d9]"></a>USBD_LL_StallEP</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, lto-llvm-ad6319.o(.text.USBD_LL_StallEP))
=======
<P><STRONG><a name="[d9]"></a>USBD_LL_StallEP</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, lto-llvm-13ef72.o(.text.USBD_LL_StallEP))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_LL_StallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Setup
</UL>

<<<<<<< HEAD
<P><STRONG><a name="[dd]"></a>USBD_LL_ClearStallEP</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, lto-llvm-ad6319.o(.text.USBD_LL_ClearStallEP))
=======
<P><STRONG><a name="[dd]"></a>USBD_LL_ClearStallEP</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, lto-llvm-13ef72.o(.text.USBD_LL_ClearStallEP))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_LL_ClearStallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<<<<<<< HEAD
<P><STRONG><a name="[de]"></a>USBD_LL_SetUSBAddress</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lto-llvm-ad6319.o(.text.USBD_LL_SetUSBAddress))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[e0]"></a>USBD_LL_PrepareReceive</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, lto-llvm-ad6319.o(.text.USBD_LL_PrepareReceive))
=======
<P><STRONG><a name="[de]"></a>USBD_LL_SetUSBAddress</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lto-llvm-13ef72.o(.text.USBD_LL_SetUSBAddress))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[e0]"></a>USBD_LL_PrepareReceive</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, lto-llvm-13ef72.o(.text.USBD_LL_PrepareReceive))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_LL_PrepareReceive &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<<<<<<< HEAD
<P><STRONG><a name="[6b]"></a>USBD_FS_DeviceDescriptor</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lto-llvm-ad6319.o(.text.USBD_FS_DeviceDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ad6319.o(.data.FS_Desc)
</UL>
<P><STRONG><a name="[6c]"></a>USBD_FS_LangIDStrDescriptor</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lto-llvm-ad6319.o(.text.USBD_FS_LangIDStrDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ad6319.o(.data.FS_Desc)
</UL>
<P><STRONG><a name="[6d]"></a>USBD_FS_ManufacturerStrDescriptor</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lto-llvm-ad6319.o(.text.USBD_FS_ManufacturerStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_FS_ManufacturerStrDescriptor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ad6319.o(.data.FS_Desc)
</UL>
<P><STRONG><a name="[6e]"></a>USBD_FS_ProductStrDescriptor</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lto-llvm-ad6319.o(.text.USBD_FS_ProductStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_FS_ProductStrDescriptor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ad6319.o(.data.FS_Desc)
</UL>
<P><STRONG><a name="[6f]"></a>USBD_FS_SerialStrDescriptor</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, lto-llvm-ad6319.o(.text.USBD_FS_SerialStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_FS_SerialStrDescriptor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ad6319.o(.data.FS_Desc)
</UL>
<P><STRONG><a name="[70]"></a>USBD_FS_ConfigStrDescriptor</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lto-llvm-ad6319.o(.text.USBD_FS_ConfigStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_FS_ConfigStrDescriptor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ad6319.o(.data.FS_Desc)
</UL>
<P><STRONG><a name="[71]"></a>USBD_FS_InterfaceStrDescriptor</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lto-llvm-ad6319.o(.text.USBD_FS_InterfaceStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_FS_InterfaceStrDescriptor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ad6319.o(.data.FS_Desc)
</UL>
<P><STRONG><a name="[7c]"></a>CDC_Init_FS</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, lto-llvm-ad6319.o(.text.CDC_Init_FS))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ad6319.o(.data.USBD_Interface_fops_FS)
</UL>
<P><STRONG><a name="[7d]"></a>CDC_DeInit_FS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lto-llvm-ad6319.o(.text.CDC_DeInit_FS))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ad6319.o(.data.USBD_Interface_fops_FS)
</UL>
<P><STRONG><a name="[7e]"></a>CDC_Control_FS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lto-llvm-ad6319.o(.text.CDC_Control_FS))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ad6319.o(.data.USBD_Interface_fops_FS)
</UL>
<P><STRONG><a name="[7f]"></a>CDC_Receive_FS</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, lto-llvm-ad6319.o(.text.CDC_Receive_FS))
=======
<P><STRONG><a name="[6b]"></a>USBD_FS_DeviceDescriptor</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lto-llvm-13ef72.o(.text.USBD_FS_DeviceDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-13ef72.o(.data.FS_Desc)
</UL>
<P><STRONG><a name="[6c]"></a>USBD_FS_LangIDStrDescriptor</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lto-llvm-13ef72.o(.text.USBD_FS_LangIDStrDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-13ef72.o(.data.FS_Desc)
</UL>
<P><STRONG><a name="[6d]"></a>USBD_FS_ManufacturerStrDescriptor</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lto-llvm-13ef72.o(.text.USBD_FS_ManufacturerStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_FS_ManufacturerStrDescriptor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-13ef72.o(.data.FS_Desc)
</UL>
<P><STRONG><a name="[6e]"></a>USBD_FS_ProductStrDescriptor</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lto-llvm-13ef72.o(.text.USBD_FS_ProductStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_FS_ProductStrDescriptor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-13ef72.o(.data.FS_Desc)
</UL>
<P><STRONG><a name="[6f]"></a>USBD_FS_SerialStrDescriptor</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, lto-llvm-13ef72.o(.text.USBD_FS_SerialStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_FS_SerialStrDescriptor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-13ef72.o(.data.FS_Desc)
</UL>
<P><STRONG><a name="[70]"></a>USBD_FS_ConfigStrDescriptor</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lto-llvm-13ef72.o(.text.USBD_FS_ConfigStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_FS_ConfigStrDescriptor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-13ef72.o(.data.FS_Desc)
</UL>
<P><STRONG><a name="[71]"></a>USBD_FS_InterfaceStrDescriptor</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lto-llvm-13ef72.o(.text.USBD_FS_InterfaceStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_FS_InterfaceStrDescriptor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-13ef72.o(.data.FS_Desc)
</UL>
<P><STRONG><a name="[7c]"></a>CDC_Init_FS</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, lto-llvm-13ef72.o(.text.CDC_Init_FS))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-13ef72.o(.data.USBD_Interface_fops_FS)
</UL>
<P><STRONG><a name="[7d]"></a>CDC_DeInit_FS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lto-llvm-13ef72.o(.text.CDC_DeInit_FS))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-13ef72.o(.data.USBD_Interface_fops_FS)
</UL>
<P><STRONG><a name="[7e]"></a>CDC_Control_FS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lto-llvm-13ef72.o(.text.CDC_Control_FS))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-13ef72.o(.data.USBD_Interface_fops_FS)
</UL>
<P><STRONG><a name="[7f]"></a>CDC_Receive_FS</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, lto-llvm-13ef72.o(.text.CDC_Receive_FS))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CDC_Receive_FS &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
</UL>
<<<<<<< HEAD
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ad6319.o(.data.USBD_Interface_fops_FS)
</UL>
<P><STRONG><a name="[80]"></a>CDC_TransmitCplt_FS</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lto-llvm-ad6319.o(.text.CDC_TransmitCplt_FS))
=======
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-13ef72.o(.data.USBD_Interface_fops_FS)
</UL>
<P><STRONG><a name="[80]"></a>CDC_TransmitCplt_FS</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lto-llvm-13ef72.o(.text.CDC_TransmitCplt_FS))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = CDC_TransmitCplt_FS &rArr; osEventFlagsSet &rArr; xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
</UL>
<<<<<<< HEAD
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ad6319.o(.data.USBD_Interface_fops_FS)
</UL>
<P><STRONG><a name="[da]"></a>USBD_CtlSendData</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, lto-llvm-ad6319.o(.text.USBD_CtlSendData))
=======
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-13ef72.o(.data.USBD_Interface_fops_FS)
</UL>
<P><STRONG><a name="[da]"></a>USBD_CtlSendData</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, lto-llvm-13ef72.o(.text.USBD_CtlSendData))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_CtlSendData &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<<<<<<< HEAD
<P><STRONG><a name="[db]"></a>USB_EP0_OutStart</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, lto-llvm-ad6319.o(.text.USB_EP0_OutStart))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[dc]"></a>USBD_CtlSendStatus</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, lto-llvm-ad6319.o(.text.USBD_CtlSendStatus))
=======
<P><STRONG><a name="[db]"></a>USB_EP0_OutStart</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, lto-llvm-13ef72.o(.text.USB_EP0_OutStart))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[dc]"></a>USBD_CtlSendStatus</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, lto-llvm-13ef72.o(.text.USBD_CtlSendStatus))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_CtlSendStatus &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<<<<<<< HEAD
<P><STRONG><a name="[df]"></a>USBD_CtlContinueSendData</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lto-llvm-ad6319.o(.text.USBD_CtlContinueSendData))
=======
<P><STRONG><a name="[df]"></a>USBD_CtlContinueSendData</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lto-llvm-13ef72.o(.text.USBD_CtlContinueSendData))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_CtlContinueSendData &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<<<<<<< HEAD
<P><STRONG><a name="[72]"></a>USBD_CDC_Init</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, lto-llvm-ad6319.o(.text.USBD_CDC_Init))
=======
<P><STRONG><a name="[72]"></a>USBD_CDC_Init</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, lto-llvm-13ef72.o(.text.USBD_CDC_Init))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = USBD_CDC_Init &rArr; USBD_LL_OpenEP
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
</UL>
<<<<<<< HEAD
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ad6319.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[73]"></a>USBD_CDC_DeInit</STRONG> (Thumb, 362 bytes, Stack size 16 bytes, lto-llvm-ad6319.o(.text.USBD_CDC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_CDC_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ad6319.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[74]"></a>USBD_CDC_Setup</STRONG> (Thumb, 378 bytes, Stack size 24 bytes, lto-llvm-ad6319.o(.text.USBD_CDC_Setup))
=======
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-13ef72.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[73]"></a>USBD_CDC_DeInit</STRONG> (Thumb, 362 bytes, Stack size 16 bytes, lto-llvm-13ef72.o(.text.USBD_CDC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_CDC_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-13ef72.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[74]"></a>USBD_CDC_Setup</STRONG> (Thumb, 378 bytes, Stack size 24 bytes, lto-llvm-13ef72.o(.text.USBD_CDC_Setup))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_CDC_Setup &rArr; USBD_LL_StallEP
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
</UL>
<<<<<<< HEAD
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ad6319.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[75]"></a>USBD_CDC_EP0_RxReady</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lto-llvm-ad6319.o(.text.USBD_CDC_EP0_RxReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_CDC_EP0_RxReady
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ad6319.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[76]"></a>USBD_CDC_DataIn</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, lto-llvm-ad6319.o(.text.USBD_CDC_DataIn))
=======
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-13ef72.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[75]"></a>USBD_CDC_EP0_RxReady</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lto-llvm-13ef72.o(.text.USBD_CDC_EP0_RxReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_CDC_EP0_RxReady
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-13ef72.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[76]"></a>USBD_CDC_DataIn</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, lto-llvm-13ef72.o(.text.USBD_CDC_DataIn))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_CDC_DataIn &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
</UL>
<<<<<<< HEAD
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ad6319.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[77]"></a>USBD_CDC_DataOut</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, lto-llvm-ad6319.o(.text.USBD_CDC_DataOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_CDC_DataOut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ad6319.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[78]"></a>USBD_CDC_GetHSCfgDesc</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, lto-llvm-ad6319.o(.text.USBD_CDC_GetHSCfgDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_CDC_GetHSCfgDesc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ad6319.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[79]"></a>USBD_CDC_GetFSCfgDesc</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, lto-llvm-ad6319.o(.text.USBD_CDC_GetFSCfgDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_CDC_GetFSCfgDesc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ad6319.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[7a]"></a>USBD_CDC_GetOtherSpeedCfgDesc</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, lto-llvm-ad6319.o(.text.USBD_CDC_GetOtherSpeedCfgDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_CDC_GetOtherSpeedCfgDesc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ad6319.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[7b]"></a>USBD_CDC_GetDeviceQualifierDescriptor</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-ad6319.o(.text.USBD_CDC_GetDeviceQualifierDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ad6319.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[e2]"></a>xTaskIncrementTick</STRONG> (Thumb, 494 bytes, Stack size 40 bytes, lto-llvm-ad6319.o(.text.xTaskIncrementTick))
=======
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-13ef72.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[77]"></a>USBD_CDC_DataOut</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, lto-llvm-13ef72.o(.text.USBD_CDC_DataOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_CDC_DataOut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-13ef72.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[78]"></a>USBD_CDC_GetHSCfgDesc</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, lto-llvm-13ef72.o(.text.USBD_CDC_GetHSCfgDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_CDC_GetHSCfgDesc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-13ef72.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[79]"></a>USBD_CDC_GetFSCfgDesc</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, lto-llvm-13ef72.o(.text.USBD_CDC_GetFSCfgDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_CDC_GetFSCfgDesc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-13ef72.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[7a]"></a>USBD_CDC_GetOtherSpeedCfgDesc</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, lto-llvm-13ef72.o(.text.USBD_CDC_GetOtherSpeedCfgDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_CDC_GetOtherSpeedCfgDesc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-13ef72.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[7b]"></a>USBD_CDC_GetDeviceQualifierDescriptor</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-13ef72.o(.text.USBD_CDC_GetDeviceQualifierDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-13ef72.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[e2]"></a>xTaskIncrementTick</STRONG> (Thumb, 494 bytes, Stack size 40 bytes, lto-llvm-13ef72.o(.text.xTaskIncrementTick))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xTaskIncrementTick &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<<<<<<< HEAD
<P><STRONG><a name="[6a]"></a>prvTaskExitError</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, lto-llvm-ad6319.o(.text.prvTaskExitError))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = prvTaskExitError
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lto-llvm-ad6319.o(.text.osThreadNew)
<LI> lto-llvm-ad6319.o(.text.xTaskCreateStatic)
</UL>
<P><STRONG><a name="[109]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 492 bytes, Stack size 32 bytes, lto-llvm-ad6319.o(.text.prvAddNewTaskToReadyList))
=======
<P><STRONG><a name="[6a]"></a>prvTaskExitError</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, lto-llvm-13ef72.o(.text.prvTaskExitError))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = prvTaskExitError
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lto-llvm-13ef72.o(.text.osThreadNew)
<LI> lto-llvm-13ef72.o(.text.xTaskCreateStatic)
</UL>
<P><STRONG><a name="[109]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 492 bytes, Stack size 32 bytes, lto-llvm-13ef72.o(.text.prvAddNewTaskToReadyList))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvAddNewTaskToReadyList &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>

<<<<<<< HEAD
<P><STRONG><a name="[69]"></a>vEventGroupSetBitsCallback</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lto-llvm-ad6319.o(.text.vEventGroupSetBitsCallback))
=======
<P><STRONG><a name="[69]"></a>vEventGroupSetBitsCallback</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lto-llvm-13ef72.o(.text.vEventGroupSetBitsCallback))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = vEventGroupSetBitsCallback &rArr; xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<<<<<<< HEAD
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ad6319.o(.text.osEventFlagsSet)
</UL>
<P><STRONG><a name="[106]"></a>xEventGroupSetBits</STRONG> (Thumb, 502 bytes, Stack size 40 bytes, lto-llvm-ad6319.o(.text.xEventGroupSetBits))
=======
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-13ef72.o(.text.osEventFlagsSet)
</UL>
<P><STRONG><a name="[106]"></a>xEventGroupSetBits</STRONG> (Thumb, 502 bytes, Stack size 40 bytes, lto-llvm-13ef72.o(.text.xEventGroupSetBits))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupSetBitsCallback
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
</UL>

<<<<<<< HEAD
<P><STRONG><a name="[10b]"></a>prvUnlockQueue</STRONG> (Thumb, 328 bytes, Stack size 40 bytes, lto-llvm-ad6319.o(.text.prvUnlockQueue))
=======
<P><STRONG><a name="[10b]"></a>prvUnlockQueue</STRONG> (Thumb, 328 bytes, Stack size 40 bytes, lto-llvm-13ef72.o(.text.prvUnlockQueue))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<<<<<<< HEAD
<P><STRONG><a name="[10d]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, lto-llvm-ad6319.o(.text.xTaskCheckForTimeOut))
=======
<P><STRONG><a name="[10d]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, lto-llvm-13ef72.o(.text.xTaskCheckForTimeOut))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = xTaskCheckForTimeOut &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<<<<<<< HEAD
<P><STRONG><a name="[10e]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, lto-llvm-ad6319.o(.text.xTaskPriorityDisinherit))
=======
<P><STRONG><a name="[10e]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, lto-llvm-13ef72.o(.text.xTaskPriorityDisinherit))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xTaskPriorityDisinherit &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<<<<<<< HEAD
<P><STRONG><a name="[10a]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, lto-llvm-ad6319.o(.text.prvProcessExpiredTimer))
=======
<P><STRONG><a name="[10a]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, lto-llvm-13ef72.o(.text.prvProcessExpiredTimer))
>>>>>>> 7f1cbe84c431b7ab2a37a1c19e415969644a8e04
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvProcessExpiredTimer &rArr; EventRecord2
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
